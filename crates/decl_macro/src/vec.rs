// let v = my_vec!(1, 2, 3);
// let v = my_vec![1, 2, 3];
// let v = my_vec!{1, 2, 3};
#[macro_export]
macro_rules! my_vec {
    // $( ... )*	匹配 0次 或 多次，没有分隔符
    // $( ... ),*	匹配 0次 或 多次，以逗号分隔
    // $( ... );*	匹配 0次 或 多次，以分号分隔
    (
        // 匹配 0次 或 多次，中间以逗号分隔
        $(
            $item:expr
        ),*
    ) => {
        // 加个 大括号，用于将 展开代码 隔离，免得和外部变量冲突
        {
            let mut r = Vec::new();
            
            // 上面 匹配模式 有多少项，这里就 重复多少次代码
            $(
                r.push($item);
            )*

            r
        }
    };

    ( 
        $(
            $x:expr 
        ),+ 
        , // 如果末尾 有逗号
    ) => {
        my_vec![ $( $x ),* ] // 还原成 第二种
    };
}